// Generated by CoffeeScript 1.10.0
(function() {
  var args, fs, page, puts;

  args = require('system').args;

  fs = require('fs');

  page = require('webpage').create();

  if (args.length > 1) {
    puts = function(content) {
      return fs.write(args[1], content, 'w');
    };
  } else {
    puts = function(content) {
      return console.log(content);
    };
  }

  page.open("buttons.html", function() {
    puts(page.evaluate(function(svgs) {
      var styleSheets;
      styleSheets = Array.prototype.filter.call(document.styleSheets, function(styleSheet) {
        var ref;
        return (ref = styleSheet.href) != null ? ref.match(/\/octicons\.css$/) : void 0;
      });
      return Array.prototype.filter.call(styleSheets[0].cssRules, function(cssRule) {
        var ref;
        return (ref = cssRule.selectorText) != null ? ref.match(/^\.octicon-[\w-]+?::before(?:\s*,\s*\.octicon-[\w-]+?::before)*$/) : void 0;
      }).map(function(cssRule) {
        var className, document, height, i, len, ref, round, selectorText, width;
        selectorText = cssRule.selectorText.replace(/::before/g, "");
        ref = selectorText.split(", ");
        for (i = 0, len = ref.length; i < len; i++) {
          className = ref[i];
          if (className in svgs) {
            document = new DOMParser().parseFromString(svgs[className], "text/xml");
          }
        }
        round = function(length) {
          if (Math.abs(length - Math.round(length)) < 0.01) {
            return Math.round(length);
          } else {
            return length;
          }
        };
        height = round(document.documentElement.getAttribute("height"));
        width = round(document.documentElement.getAttribute("width"));
        return selectorText + " { width: unit(( " + width + " / " + height + " ), em); }";
      }).join("\n");
    }, (function() {
      var i, len, octicons, ref, svg, svgs;
      octicons = "components/octicons/svg";
      svgs = {};
      ref = fs.list(octicons);
      for (i = 0, len = ref.length; i < len; i++) {
        svg = ref[i];
        if (svg.match(/\.svg$/i)) {
          svgs[".octicon-" + (svg.replace(/\.svg$/i, ""))] = fs.read(octicons + "/" + svg);
        }
      }
      return svgs;
    })()));
    return phantom.exit();
  });

}).call(this);
