// Generated by CoffeeScript 1.8.0
(function() {
  var Anchor, Config, Element, Frame, FrameContent, Hash, QueryString, anchor, anchors, _fn, _i, _len,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  QueryString = (function() {
    function QueryString() {}

    QueryString.stringify = function(obj) {
      var key, results, value;
      results = [];
      for (key in obj) {
        value = obj[key];
        if (value == null) {
          value = "";
        }
        results.push("" + key + "=" + value);
      }
      return results.join("&");
    };

    QueryString.parse = function(str) {
      var key, obj, pair, value, _i, _len, _ref, _ref1;
      obj = {};
      _ref = str.split("&");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pair = _ref[_i];
        if (!(pair !== "")) {
          continue;
        }
        _ref1 = pair.split("="), key = _ref1[0], value = 2 <= _ref1.length ? __slice.call(_ref1, 1) : [];
        if (key !== "") {
          obj[key] = value.join("=");
        }
      }
      return obj;
    };

    return QueryString;

  })();

  Hash = (function() {
    function Hash() {}

    Hash.encode = function(data) {
      return "#" + encodeURIComponent(QueryString.stringify(data));
    };

    Hash.decode = function(data) {
      if (data == null) {
        data = document.location.hash;
      }
      return QueryString.parse(decodeURIComponent(data.replace(/^#/, "")));
    };

    return Hash;

  })();

  Element = (function() {
    function Element(tagName, callback) {
      this.element = document.createElement(tagName);
      if (callback) {
        callback(this.element);
      }
    }

    Element.prototype.on = function(event, func) {
      if (this.element.addEventListener) {
        this.element.addEventListener("" + event, func);
      } else if (this.element.attachEvent) {
        this.element.attachEvent("on" + event, func);
      }
      return this;
    };

    Element.prototype.once = function(event, func) {
      var once;
      once = (function(_this) {
        return function() {
          if (_this.element.removeEventListener) {
            _this.element.removeEventListener("" + event, once);
          } else if (_this.element.detachEvent) {
            _this.element.detachEvent("on" + event, once);
          }
          func();
        };
      })(this);
      return this.on(event, once);
    };

    return Element;

  })();

  Anchor = (function() {
    var filter_js;

    function Anchor(element) {
      this.element = element;
      this.data = {
        countApi: (function() {
          var api;
          if (api = element.getAttribute("data-count-api")) {
            if ("/" !== api.charAt(0)) {
              api = "/" + api;
            }
            return api;
          }
        })(),
        countHref: (function() {
          var href;
          if ((href = element.getAttribute("data-count-href")) && (href = filter_js(href))) {
            return href;
          } else {
            return filter_js(element.href);
          }
        })(),
        href: filter_js(element.href),
        style: (function() {
          var i, style, _i, _len, _ref;
          if (style = element.getAttribute("data-style")) {
            _ref = Config.styles;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              i = _ref[_i];
              if (i === style) {
                return style;
              }
            }
          }
          return Config.styles[0];
        })(),
        text: element.getAttribute("data-text") || element.textContent || element.innerText,
        icon: element.getAttribute("data-icon") || Config.icon
      };
    }

    filter_js = function(href) {
      if (!/^\s*javascript:/i.test(href)) {
        return href;
      }
    };

    return Anchor;

  })();

  Frame = (function(_super) {
    __extends(Frame, _super);

    function Frame() {
      var callback, hash;
      hash = arguments[0], callback = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.hash = hash;
      this.callback = callback;
      Frame.__super__.constructor.call(this, "iframe", function(iframe) {
        var key, value, _ref, _ref1;
        _ref = {
          allowtransparency: true,
          scrolling: "no",
          frameBorder: 0
        };
        for (key in _ref) {
          value = _ref[key];
          iframe.setAttribute(key, value);
        }
        _ref1 = {
          border: "none",
          height: "0",
          width: "1px"
        };
        for (key in _ref1) {
          value = _ref1[key];
          iframe.style[key] = value;
        }
        if (callback[0]) {
          callback[0](iframe);
        }
      });
      this.once("load", (function(_this) {
        return function() {
          var contentDocument, script;
          contentDocument = _this.element.contentWindow.document;
          script = contentDocument.getElementsByTagName("script")[0];
          if (!script.readyState || /loaded|complete/.test(script.readyState)) {
            setTimeout(function() {
              return _this.reload();
            }, 0);
          } else {
            _this.on.call({
              element: script
            }, "readystatechange", function(_, aborted) {
              if (aborted || !script.readyState || /loaded|complete/.test(script.readyState)) {
                _this.reload();
              }
            });
          }
        };
      })(this));
      this.element.contentWindow.document.open();
      this.element.contentWindow.document.write("<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title></title>\n<base target=\"_blank\"><!--[if lte IE 6]></base><![endif]-->\n<link rel=\"stylesheet\" href=\"" + Config.url + "assets/css/buttons.css\">\n<style>html{visibility:hidden;}</style>\n<script>document.location.hash = \"" + this.hash + "\";</script>\n</head>\n<body>\n<script src=\"" + Config.script.src + "\"></script>\n</body>\n</html>");
      this.element.contentWindow.document.close();
    }

    Frame.prototype.reload = function() {
      var body, contentDocument, html, style;
      contentDocument = this.element.contentWindow.document;
      html = contentDocument.documentElement;
      body = contentDocument.body;
      html.style.overflow = body.style.overflow = "visible";
      style = {
        height: "" + body.scrollHeight + "px",
        width: "" + body.scrollWidth + "px"
      };
      html.style.overflow = body.style.overflow = "";
      this.once("load", (function(_this) {
        return function() {
          var key, value;
          for (key in style) {
            value = style[key];
            _this.element.style[key] = value;
          }
          if (_this.callback[1]) {
            _this.callback[1](_this.element);
          }
        };
      })(this));
      this.element.src = "" + Config.url + "buttons.html" + this.hash;
    };

    return Frame;

  })(Element);

  FrameContent = (function() {
    var Button, Count;

    function FrameContent(data) {
      document.body.className = data.style;
      document.getElementsByTagName("base")[0].href = data.href;
      new Button(data, function(buttonElement) {
        document.body.appendChild(buttonElement);
      });
      new Count(data, function(countElement) {
        document.body.appendChild(countElement);
      });
    }

    Button = (function(_super) {
      __extends(Button, _super);

      function Button(data, callback) {
        Button.__super__.constructor.call(this, "a", function(a) {
          a.className = "button";
          if (data.href) {
            a.href = data.href;
          }
          new Element("i", function(icon) {
            icon = document.createElement("i");
            icon.className = (function() {
              var classNames;
              classNames = [data.icon];
              if (Config.iconClass != null) {
                classNames.push(Config.iconClass);
              }
              return classNames.join(" ");
            })();
            a.appendChild(icon);
          });
          new Element("span", function(text) {
            if (data.text) {
              text.appendChild(document.createTextNode(" " + data.text + " "));
            }
            a.appendChild(text);
          });
          if (callback) {
            callback(a);
          }
        });
      }

      return Button;

    })(Element);

    Count = (function(_super) {
      __extends(Count, _super);

      function Count(data, callback) {
        var endpoint;
        if (data.countApi) {
          Count.__super__.constructor.call(this, "a", function(a) {
            a.className = "count";
            if (data.countHref) {
              a.href = data.countHref;
            }
            new Element("b", function(b) {
              a.appendChild(b);
            });
            new Element("i", function(i) {
              a.appendChild(i);
            });
            new Element("span", function(text) {
              a.appendChild(text);
              window.callback = function(json) {
                var i, _i, _len, _ref;
                window.callback = null;
                if (json.meta.status === 200) {
                  _ref = data.countApi.split("#").slice(1).join("#").split(".");
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    i = _ref[_i];
                    json.data = json.data[i];
                  }
                  if (!(isNaN(parseFloat(json.data))) && (isFinite(json.data))) {
                    json.data = json.data.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                  }
                  text.appendChild(document.createTextNode(" " + json.data + " "));
                  if (callback) {
                    callback(a);
                  }
                }
              };
            });
          });
          endpoint = (function() {
            var query, url;
            url = data.countApi.split("#")[0];
            query = QueryString.parse(url.split("?").slice(1).join("?"));
            query.callback = "callback";
            return "" + (url.split("?")[0]) + "?" + (QueryString.stringify(query));
          })();
          new Element("script", function(script) {
            var head;
            script.async = true;
            script.src = "" + Config.api + endpoint;
            head = document.getElementsByTagName("head")[0];
            head.insertBefore(script, head.firstChild);
          });
        }
      }

      return Count;

    })(Element);

    return FrameContent;

  })();

  Config = {
    api: "https://api.github.com",
    buttonClass: "github-button",
    iconClass: "octicon",
    icon: "octicon-mark-github",
    scriptId: "github-bjs",
    styles: ["default", "mega"]
  };

  if (Config.script = document.getElementById(Config.scriptId)) {
    Config.url = Config.script.src.replace(/buttons.js$/, "");
    if (document.querySelectorAll) {
      anchors = document.querySelectorAll("a." + Config.buttonClass);
    } else {
      anchors = (function() {
        var _i, _len, _ref, _results;
        _ref = document.getElementsByTagName("a");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          anchor = _ref[_i];
          if ((" " + anchor.className + " ").replace(/[\t\r\n\f]/g, " ").indexOf((" " + Config.buttonClass + " ") >= 0)) {
            _results.push(anchor);
          }
        }
        return _results;
      })();
    }
    _fn = function(a) {
      new Frame(Hash.encode(new Anchor(a).data), function(iframe) {
        a.parentNode.insertBefore(iframe, a);
      }, function() {
        a.parentNode.removeChild(a);
      });
    };
    for (_i = 0, _len = anchors.length; _i < _len; _i++) {
      anchor = anchors[_i];
      _fn(anchor);
    }
  } else {
    new FrameContent(Hash.decode());
  }

}).call(this);
