// Generated by CoffeeScript 1.10.0
(function() {
  var ButtonAnchor, ButtonFrame, ButtonFrameContent, CONFIG_ANCHOR_CLASS, CONFIG_API, CONFIG_ICON_CLASS, CONFIG_ICON_DEFAULT, CONFIG_SCRIPT, CONFIG_URL, Element, EventTarget, FlatObject, Frame, Hash, QueryString, anchor, anchors, document, fn, j, len, window,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window = this;

  document = window.document;

  CONFIG_API = "https://api.github.com";

  CONFIG_ANCHOR_CLASS = "github-button";

  CONFIG_ICON_CLASS = "octicon";

  CONFIG_ICON_DEFAULT = CONFIG_ICON_CLASS + "-mark-github";

  CONFIG_SCRIPT = document.getElementById("github-bjs");

  if (CONFIG_SCRIPT) {
    CONFIG_URL = CONFIG_SCRIPT.src.replace(/[^\/]*([?#].*)?$/, "");
  }

  FlatObject = (function() {
    var index;

    function FlatObject() {}

    FlatObject.flatten = function(obj) {
      var flatten, result;
      flatten = function(object, flat_key) {
        var index, item, j, key, len, value;
        switch (Object.prototype.toString.call(object)) {
          case "[object Object]":
            for (key in object) {
              value = object[key];
              flatten(value, flat_key ? flat_key + "." + key : key);
            }
            break;
          case "[object Array]":
            for (index = j = 0, len = object.length; j < len; index = ++j) {
              item = object[index];
              flatten(item, flat_key + "[" + index + "]");
            }
            break;
          default:
            result[flat_key] = object;
        }
      };
      result = {};
      flatten(obj, "");
      return result;
    };

    FlatObject.expand = function(obj) {
      var flat_key, key, keys, namespace, target, value;
      namespace = [];
      for (flat_key in obj) {
        value = obj[flat_key];
        keys = flat_key.match(/((?!\[\d+\])[^.])+|\[\d+\]/g);
        target = namespace;
        key = 0;
        while (keys.length) {
          if (target[key] == null) {
            target[key] = keys[0] === index(keys[0]) ? {} : [];
          }
          target = target[key];
          key = index(keys.shift());
        }
        target[key] = value;
      }
      return namespace[0];
    };

    index = function(str) {
      var match;
      if (match = str.match(/^\[(\d+)\]$/)) {
        return Number(match[1]);
      } else {
        return str;
      }
    };

    return FlatObject;

  })();

  QueryString = (function() {
    function QueryString() {}

    QueryString.stringify = function(obj) {
      var key, results, value;
      results = [];
      for (key in obj) {
        value = obj[key];
        results.push((encodeURIComponent(key)) + "=" + (value != null ? encodeURIComponent(value) : ""));
      }
      return results.join("&");
    };

    QueryString.parse = function(str) {
      var j, key, len, obj, pair, ref, ref1, value;
      obj = {};
      ref = str.split("&");
      for (j = 0, len = ref.length; j < len; j++) {
        pair = ref[j];
        if (!(pair !== "")) {
          continue;
        }
        ref1 = pair.split("="), key = ref1[0], value = 2 <= ref1.length ? slice.call(ref1, 1) : [];
        if (key !== "") {
          obj[decodeURIComponent(key)] = decodeURIComponent(value.join("="));
        }
      }
      return obj;
    };

    return QueryString;

  })();

  Hash = (function() {
    function Hash() {}

    Hash.encode = function(data) {
      return "#" + QueryString.stringify(FlatObject.flatten(data));
    };

    Hash.decode = function(data) {
      if (data == null) {
        data = document.location.hash;
      }
      return (FlatObject.expand(QueryString.parse(data.replace(/^#/, "")))) || {};
    };

    return Hash;

  })();

  EventTarget = (function() {
    var addEventListener, removeEventListener;

    function EventTarget($) {
      this.$ = $;
    }

    EventTarget.prototype.on = function() {
      var callback, eventName, events, func, j, k, len;
      events = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), func = arguments[j++];
      callback = (function(_this) {
        return function(event) {
          return func.call(_this, event || window.event);
        };
      })(this);
      for (k = 0, len = events.length; k < len; k++) {
        eventName = events[k];
        addEventListener(this.$, eventName, callback);
      }
    };

    EventTarget.prototype.once = function() {
      var callback, eventName, events, func, j, k, len;
      events = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), func = arguments[j++];
      callback = (function(_this) {
        return function(event) {
          var eventName, k, len;
          for (k = 0, len = events.length; k < len; k++) {
            eventName = events[k];
            removeEventListener(_this.$, eventName, callback);
          }
          return func.call(_this, event || window.event);
        };
      })(this);
      for (k = 0, len = events.length; k < len; k++) {
        eventName = events[k];
        addEventListener(this.$, eventName, callback);
      }
    };

    addEventListener = function(element, event, func) {
      if (element.addEventListener) {
        element.addEventListener("" + event, func);
      } else {
        element.attachEvent("on" + event, func);
      }
    };

    removeEventListener = function(element, event, func) {
      if (element.removeEventListener) {
        element.removeEventListener("" + event, func);
      } else {
        element.detachEvent("on" + event, func);
      }
    };

    return EventTarget;

  })();

  Element = (function(superClass) {
    var addClass, hasClass, r_whitespace, removeClass;

    extend(Element, superClass);

    function Element(element, callback) {
      this.$ = element && element.nodeType === 1 ? element : document.createElement(element);
      if (callback) {
        callback.call(this, this.$);
      }
    }

    Element.prototype.addClass = function(className) {
      if (!hasClass(this.$, className)) {
        addClass(this.$, className);
      }
    };

    Element.prototype.removeClass = function(className) {
      if (hasClass(this.$, className)) {
        removeClass(this.$, className);
      }
    };

    Element.prototype.hasClass = function(className) {
      return hasClass(this.$, className);
    };

    addClass = function(element, className) {
      element.className += " " + className;
    };

    removeClass = function(element, className) {
      element.className = (" " + element.className + " ").replace(r_whitespace, " ").replace(" " + className + " ", "").replace(/^ | $/, "");
    };

    hasClass = function(element, className) {
      return (" " + element.className + " ").replace(r_whitespace, " ").indexOf(" " + className + " ") >= 0;
    };

    r_whitespace = /[ \t\n\f\r]+/g;

    return Element;

  })(EventTarget);

  Frame = (function(superClass) {
    var devicePixelRatio, roundPixel;

    extend(Frame, superClass);

    function Frame(callback) {
      Frame.__super__.constructor.call(this, "iframe", function(iframe) {
        var key, ref, value;
        ref = {
          allowtransparency: true,
          scrolling: "no",
          frameBorder: 0
        };
        for (key in ref) {
          value = ref[key];
          iframe.setAttribute(key, value);
        }
        iframe.style.cssText = "width: 1px; height: 0; border: none";
        iframe.src = "javascript:0";
        if (callback) {
          callback.call(this, iframe);
        }
      });
    }

    Frame.prototype.html = function(html) {
      var contentDocument;
      try {
        contentDocument = this.$.contentWindow.document;
        contentDocument.open().write(html);
        contentDocument.close();
      } catch (undefined) {}
    };

    Frame.prototype.load = function(src) {
      this.$.src = src;
    };

    Frame.prototype.size = function() {
      var body, boundingClientRect, contentDocument, height, html, width;
      try {
        contentDocument = this.$.contentWindow.document;
        html = contentDocument.documentElement;
        body = contentDocument.body;
        width = html.scrollWidth;
        height = html.scrollHeight;
        if (body.getBoundingClientRect) {
          body.style.display = "inline-block";
          boundingClientRect = body.getBoundingClientRect();
          width = Math.max(width, roundPixel(boundingClientRect.width || boundingClientRect.right - boundingClientRect.left));
          height = Math.max(height, roundPixel(boundingClientRect.height || boundingClientRect.bottom - boundingClientRect.top));
          body.style.display = "";
        }
        return {
          width: width + "px",
          height: height + "px"
        };
      } catch (undefined) {}
    };

    Frame.prototype.resize = function(arg) {
      var height, ref, width;
      ref = arg != null ? arg : this.size() || {}, width = ref.width, height = ref.height;
      if (width) {
        this.$.style.width = width;
      }
      if (height) {
        this.$.style.height = height;
      }
    };

    devicePixelRatio = window.devicePixelRatio || 1;

    roundPixel = function(px) {
      if (devicePixelRatio > 1) {
        return Math.ceil(Math.round(px * devicePixelRatio) / devicePixelRatio * 2) / 2 || 0;
      } else {
        return Math.ceil(px) || 0;
      }
    };

    return Frame;

  })(Element);

  ButtonAnchor = (function() {
    function ButtonAnchor() {}

    ButtonAnchor.parse = function(element) {
      return {
        href: element.href,
        text: element.getAttribute("data-text") || element.textContent || element.innerText || "",
        data: {
          count: {
            api: element.getAttribute("data-count-api") || "",
            href: element.getAttribute("data-count-href") || element.href,
            aria: {
              label: element.getAttribute("data-count-aria-label") || ""
            }
          },
          style: element.getAttribute("data-style") || "",
          icon: element.getAttribute("data-icon") || ""
        },
        aria: {
          label: element.getAttribute("aria-label") || ""
        }
      };
    };

    return ButtonAnchor;

  })();

  ButtonFrame = (function(superClass) {
    extend(ButtonFrame, superClass);

    function ButtonFrame(hash, beforeload, callback) {
      var reload;
      ButtonFrame.__super__.constructor.call(this, beforeload);
      reload = (function(_this) {
        return function() {
          var size;
          reload = null;
          size = _this.size();
          _this.$.parentNode.removeChild(_this.$);
          _this.once("load", function() {
            this.resize(size);
          });
          _this.load(CONFIG_URL + "buttons.html" + hash);
          if (callback) {
            callback.call(_this, _this.$);
          }
        };
      })(this);
      this.once("load", function() {
        var jsonp_callback;
        if (jsonp_callback = this.$.contentWindow.callback) {
          new Element(jsonp_callback.script, function(script) {
            this.on("load", "error", function() {
              if (reload) {
                reload();
              }
            });
            if (script.readyState) {
              this.on("readystatechange", function() {
                if (!/i/.test(script.readyState) && reload) {
                  reload();
                }
              });
            }
          });
        } else {
          reload();
        }
      });
      this.html("<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title></title>\n<link rel=\"stylesheet\" href=\"" + CONFIG_URL + "assets/css/buttons.css\">\n<script>document.location.hash = \"" + hash + "\";</script>\n</head>\n<body>\n<script src=\"" + CONFIG_SCRIPT.src + "\"></script>\n</body>\n</html>");
    }

    return ButtonFrame;

  })(Frame);

  ButtonFrameContent = (function() {
    var Anchor;

    function ButtonFrameContent(options) {
      if (options && options.data) {
        document.body.className = options.data.style || "";
        new Anchor(options.href, null, function(a) {
          a.className = "button";
          if (options.aria.label) {
            a.setAttribute("aria-label", options.aria.label);
          }
          new Element("i", function(icon) {
            icon.className = options.data.icon || CONFIG_ICON_DEFAULT;
            if (CONFIG_ICON_CLASS) {
              this.addClass(CONFIG_ICON_CLASS);
            }
            icon.setAttribute("aria-hidden", "true");
            a.appendChild(icon);
          });
          a.appendChild(document.createTextNode(" "));
          new Element("span", function(text) {
            if (options.text) {
              text.appendChild(document.createTextNode(options.text));
            }
            a.appendChild(text);
          });
          document.body.appendChild(a);
        });
        (function(options, baseUrl) {
          if (options && options.api) {
            new Anchor(options.href, baseUrl, function(a) {
              a.className = "count";
              new Element("b", function(b) {
                a.appendChild(b);
              });
              new Element("i", function(i) {
                a.appendChild(i);
              });
              new Element("span", function(span) {
                var endpoint;
                a.appendChild(span);
                endpoint = (function() {
                  var query, url;
                  url = options.api.replace(/^(?!\/)/, "/").split("#")[0];
                  query = QueryString.parse(url.split("?").slice(1).join("?"));
                  query.callback = "callback";
                  return (url.split("?")[0]) + "?" + (QueryString.stringify(query));
                })();
                new Element("script", function(script) {
                  var head;
                  script.async = true;
                  script.src = "" + CONFIG_API + endpoint;
                  window.callback = function(json) {
                    var data;
                    window.callback = null;
                    if (json.meta.status === 200) {
                      data = FlatObject.flatten(json.data)[options.api.split("#").slice(1).join("#")];
                      if ("[object Number]" === Object.prototype.toString.call(data)) {
                        data = ("" + data).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                      }
                      span.appendChild(document.createTextNode(data));
                      if (options.aria.label) {
                        a.setAttribute("aria-label", options.aria.label.replace("#", data));
                      }
                      document.body.appendChild(a);
                    }
                  };
                  window.callback.script = script;
                  this.on("error", function() {
                    window.callback = null;
                  });
                  if (script.readyState) {
                    this.on("readystatechange", function() {
                      if (script.readyState === "loaded" && script.children && script.readyState === "loading") {
                        window.callback = null;
                      }
                    });
                  }
                  head = document.getElementsByTagName("head")[0];
                  if (window.opera) {
                    new EventTarget(document).on("DOMContentLoaded", function() {
                      head.appendChild(script);
                    });
                  } else {
                    head.appendChild(script);
                  }
                });
              });
            });
          }
        })(options.data.count, options.href);
      }
    }

    Anchor = (function(superClass) {
      var base, javascript, r_archive, r_hostname;

      extend(Anchor, superClass);

      function Anchor(urlString, baseURLstring, callback) {
        Anchor.__super__.constructor.call(this, "a", function(a) {
          var error;
          if (base) {
            if ((a.href = baseURLstring) && a.protocol !== javascript) {
              try {
                a.href = new URL(urlString, baseURLstring).href;
              } catch (error) {
                base.href = baseURLstring;
                a.href = urlString;
                new Element("div", function(div) {
                  div.innerHTML = a.outerHTML;
                  a.href = div.lastChild.href;
                  div = null;
                });
                base.href = document.location.href;
                base.removeAttribute("href");
              }
            } else {
              a.href = urlString;
            }
            if (r_archive.test(a.href)) {
              a.target = "_top";
            }
            if (a.protocol === javascript || !r_hostname.test("." + a.hostname)) {
              a.href = "#";
              a.target = "_self";
            }
          }
          callback(a);
        });
      }

      base = document.getElementsByTagName("base")[0];

      javascript = "javascript:";

      r_hostname = /\.github\.com$/;

      r_archive = /^https?:\/\/((gist\.)?github\.com\/[^\/]+\/[^\/]+\/archive\/|codeload\.github\.com\/)/;

      return Anchor;

    })(Element);

    return ButtonFrameContent;

  })();

  if (CONFIG_SCRIPT) {
    if (document.querySelectorAll) {
      anchors = document.querySelectorAll("a." + CONFIG_ANCHOR_CLASS);
    } else {
      anchors = (function() {
        var j, len, ref, results1;
        ref = document.getElementsByTagName("a");
        results1 = [];
        for (j = 0, len = ref.length; j < len; j++) {
          anchor = ref[j];
          if (new Element(anchor).hasClass(CONFIG_ANCHOR_CLASS)) {
            results1.push(anchor);
          }
        }
        return results1;
      })();
    }
    fn = function(a) {
      new ButtonFrame(Hash.encode(ButtonAnchor.parse(a)), function(iframe) {
        document.body.appendChild(iframe);
      }, function(iframe) {
        a.parentNode.replaceChild(iframe, a);
      });
    };
    for (j = 0, len = anchors.length; j < len; j++) {
      anchor = anchors[j];
      fn(anchor);
    }
  } else {
    new ButtonFrameContent(Hash.decode());
  }

}).call(this);
