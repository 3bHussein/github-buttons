// Generated by CoffeeScript 1.9.0
(function() {
  var ButtonAnchor, ButtonFrame, ButtonFrameContent, Config, Element, FlatObject, Frame, Hash, QueryString, anchor, anchors, document, window, _fn, _i, _len,
    __slice = [].slice,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  window = this;

  document = this.document;

  Config = {
    api: "https://api.github.com",
    anchorClass: "github-button",
    iconClass: "octicon",
    icon: "octicon-mark-github",
    scriptId: "github-bjs",
    styles: ["default", "mega"]
  };

  if (Config.script = document.getElementById(Config.scriptId)) {
    Config.url = Config.script.src.replace(/buttons\.js([?#].*)?$/, "");
  }

  FlatObject = (function() {
    var index;

    function FlatObject() {}

    FlatObject.flatten = function(obj) {
      var flatten, result;
      flatten = function(object, flat_key) {
        var index, item, key, value, _i, _len;
        switch (Object.prototype.toString.call(object)) {
          case "[object Object]":
            for (key in object) {
              value = object[key];
              flatten(value, flat_key ? flat_key + "." + key : key);
            }
            break;
          case "[object Array]":
            for (index = _i = 0, _len = object.length; _i < _len; index = ++_i) {
              item = object[index];
              flatten(item, flat_key + "[" + index + "]");
            }
            break;
          default:
            result[flat_key] = object;
        }
      };
      result = {};
      flatten(obj, "");
      return result;
    };

    FlatObject.expand = function(obj) {
      var flat_key, key, keys, namespace, target, value;
      namespace = [];
      for (flat_key in obj) {
        value = obj[flat_key];
        keys = flat_key.match(/((?!\[\d+\])[^.])+|\[\d+\]/g);
        target = namespace;
        key = 0;
        while (keys.length) {
          if (target[key] == null) {
            target[key] = keys[0] === index(keys[0]) ? {} : [];
          }
          target = target[key];
          key = index(keys.shift());
        }
        target[key] = value;
      }
      return namespace[0];
    };

    index = function(str) {
      var match;
      if (match = str.match(/^\[(\d+)\]$/)) {
        return Number(match[1]);
      } else {
        return str;
      }
    };

    return FlatObject;

  })();

  QueryString = (function() {
    function QueryString() {}

    QueryString.stringify = function(obj) {
      var key, results, value;
      results = [];
      for (key in obj) {
        value = obj[key];
        results.push(key + "=" + (value != null ? value : ""));
      }
      return results.join("&");
    };

    QueryString.parse = function(str) {
      var key, obj, pair, value, _i, _len, _ref, _ref1;
      obj = {};
      _ref = str.split("&");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pair = _ref[_i];
        if (!(pair !== "")) {
          continue;
        }
        _ref1 = pair.split("="), key = _ref1[0], value = 2 <= _ref1.length ? __slice.call(_ref1, 1) : [];
        if (key !== "") {
          obj[key] = value.join("=");
        }
      }
      return obj;
    };

    return QueryString;

  })();

  Hash = (function() {
    function Hash() {}

    Hash.encode = function(data) {
      return "#" + encodeURIComponent(QueryString.stringify(FlatObject.flatten(data)));
    };

    Hash.decode = function(data) {
      if (data == null) {
        data = document.location.hash;
      }
      return (FlatObject.expand(QueryString.parse(decodeURIComponent(data.replace(/^#/, ""))))) || {};
    };

    return Hash;

  })();

  Element = (function() {
    var addClass, addEventListener, hasClass, r_whitespace, removeClass, removeEventListener;

    function Element(element, callback) {
      this.$ = element && element.nodeType === 1 ? element : document.createElement(element);
      if (callback) {
        callback.call(this, this.$);
      }
    }

    Element.prototype.get = function() {
      return this.$;
    };

    Element.prototype.on = function() {
      var callback, eventName, events, func, _i, _j, _len;
      events = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), func = arguments[_i++];
      callback = (function(_this) {
        return function(event) {
          return func.call(_this, event || window.event);
        };
      })(this);
      for (_j = 0, _len = events.length; _j < _len; _j++) {
        eventName = events[_j];
        addEventListener(this.$, eventName, callback);
      }
    };

    Element.prototype.once = function() {
      var callback, eventName, events, func, _i, _j, _len;
      events = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), func = arguments[_i++];
      callback = (function(_this) {
        return function(event) {
          var eventName, _j, _len;
          for (_j = 0, _len = events.length; _j < _len; _j++) {
            eventName = events[_j];
            removeEventListener(_this.$, eventName, callback);
          }
          return func.call(_this, event || window.event);
        };
      })(this);
      for (_j = 0, _len = events.length; _j < _len; _j++) {
        eventName = events[_j];
        addEventListener(this.$, eventName, callback);
      }
    };

    Element.prototype.addClass = function(className) {
      if (!hasClass(this.$, className)) {
        addClass(this.$, className);
      }
    };

    Element.prototype.removeClass = function(className) {
      if (hasClass(this.$, className)) {
        removeClass(this.$, className);
      }
    };

    Element.prototype.hasClass = function(className) {
      return hasClass(this.$, className);
    };

    addEventListener = function(element, event, func) {
      if (element.addEventListener) {
        element.addEventListener("" + event, func);
      } else {
        element.attachEvent("on" + event, func);
      }
    };

    removeEventListener = function(element, event, func) {
      if (element.removeEventListener) {
        element.removeEventListener("" + event, func);
      } else {
        element.detachEvent("on" + event, func);
      }
    };

    r_whitespace = /[ \t\n\f\r]+/g;

    addClass = function(element, className) {
      element.className += " " + className;
    };

    removeClass = function(element, className) {
      element.className = (" " + element.className + " ").replace(r_whitespace, " ").replace(" " + className + " ", "").replace(/^ | $/, "");
    };

    hasClass = function(element, className) {
      return (" " + element.className + " ").replace(r_whitespace, " ").indexOf(" " + className + " ") >= 0;
    };

    return Element;

  })();

  Frame = (function(_super) {
    var devicePixelRatio, roundPixel;

    __extends(Frame, _super);

    function Frame(callback) {
      Frame.__super__.constructor.call(this, "iframe", function(iframe) {
        var key, value, _ref, _ref1;
        _ref = {
          allowtransparency: true,
          scrolling: "no",
          frameBorder: 0
        };
        for (key in _ref) {
          value = _ref[key];
          iframe.setAttribute(key, value);
        }
        _ref1 = {
          border: "none",
          height: "0",
          width: "1px"
        };
        for (key in _ref1) {
          value = _ref1[key];
          iframe.style[key] = value;
        }
        if (callback) {
          callback.call(this, iframe);
        }
      });
    }

    Frame.prototype.html = function(html) {
      var contentDocument;
      try {
        contentDocument = this.$.contentWindow.document;
        contentDocument.open();
        contentDocument.write(html);
        contentDocument.close();
      } catch (_error) {}
    };

    Frame.prototype.load = function(src) {
      return this.$.src = src;
    };

    Frame.prototype.size = function() {
      var body, boundingClientRect, contentDocument, height, html, width;
      try {
        contentDocument = this.$.contentWindow.document;
        html = contentDocument.documentElement;
        body = contentDocument.body;
        html.style.overflow = body.style.overflow = window.opera ? "scroll" : "visible";
        width = body.scrollWidth;
        height = body.scrollHeight;
        if (devicePixelRatio !== 1) {
          body.style.display = "inline-block";
          boundingClientRect = body.getBoundingClientRect();
          width = Math.max(width, roundPixel(boundingClientRect.width));
          height = Math.max(height, roundPixel(boundingClientRect.height));
          body.style.display = "";
        }
        html.style.overflow = body.style.overflow = "";
        return {
          width: width + "px",
          height: height + "px"
        };
      } catch (_error) {
        return {};
      }
    };

    Frame.prototype.resize = function(_arg) {
      var height, width, _ref;
      _ref = _arg != null ? _arg : this.size(), width = _ref.width, height = _ref.height;
      if (width) {
        this.$.style.width = width;
      }
      if (height) {
        return this.$.style.height = height;
      }
    };

    devicePixelRatio = window.devicePixelRatio || 1;

    roundPixel = function(px) {
      return Math.round(px * devicePixelRatio) / devicePixelRatio || 0;
    };

    return Frame;

  })(Element);

  ButtonAnchor = (function() {
    var filter_js;

    function ButtonAnchor() {}

    ButtonAnchor.parse = function(element) {
      var api, icon, style;
      return {
        href: filter_js(element.href),
        text: element.getAttribute("data-text") || element.textContent || element.innerText,
        data: {
          count: {
            api: (api = element.getAttribute("data-count-api")) && (~api.indexOf("#")) ? api.replace(/^(?!\/)/, "/") : void 0,
            href: (filter_js(element.getAttribute("data-count-href"))) || (filter_js(element.href))
          },
          style: (style = element.getAttribute("data-style")) ? style : void 0,
          icon: (icon = element.getAttribute("data-icon")) ? icon : void 0
        }
      };
    };

    filter_js = function(href) {
      if (/^\s*javascript:/i.test(href)) {
        return "";
      } else {
        return href;
      }
    };

    return ButtonAnchor;

  })();

  ButtonFrame = (function(_super) {
    __extends(ButtonFrame, _super);

    function ButtonFrame(hash, callback, onload) {
      var reload;
      ButtonFrame.__super__.constructor.call(this, callback);
      reload = (function(_this) {
        return function() {
          var size;
          size = _this.size();
          _this.once("load", function() {
            this.resize(size);
            if (onload) {
              onload.call(this, this.$);
            }
          });
          _this.load(Config.url + "buttons.html" + hash);
        };
      })(this);
      this.once("load", function() {
        var script;
        if (callback = this.$.contentWindow.callback) {
          script = callback.script;
          if (script.readyState) {
            new Element(script).on("readystatechange", function() {
              if (/loaded|complete/.test(script.readyState)) {
                reload();
              }
            });
          } else {
            new Element(script).on("load", "error", function() {
              reload();
            });
          }
        } else {
          reload();
        }
      });
      this.html("<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title></title>\n<base target=\"_blank\"><!--[if lte IE 6]></base><![endif]-->\n<link rel=\"stylesheet\" href=\"" + Config.url + "assets/css/buttons.css\">\n<script>document.location.hash = \"" + hash + "\";</script>\n</head>\n<body>\n<script src=\"" + Config.script.src + "\"></script>\n</body>\n</html>");
    }

    return ButtonFrame;

  })(Frame);

  ButtonFrameContent = (function() {
    var Button, Count;

    function ButtonFrameContent(options) {
      if (options && options.data) {
        document.body.className = ((function() {
          var style, _i, _len, _ref;
          _ref = Config.styles;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            style = _ref[_i];
            if (style === options.data.style) {
              return style;
            }
          }
        })()) || Config.styles[0];
        if (options.href) {
          document.getElementsByTagName("base")[0].href = options.href;
        }
        new Button(options, function(buttonElement) {
          document.body.appendChild(buttonElement);
        });
        new Count(options, function(countElement) {
          document.body.appendChild(countElement);
        });
      }
    }

    Button = (function(_super) {
      __extends(Button, _super);

      function Button(options, callback) {
        Button.__super__.constructor.call(this, "a", function(a) {
          a.className = "button";
          if (options.href) {
            a.href = options.href;
          }
          new Element("i", function(icon) {
            icon = document.createElement("i");
            icon.className = (options.data.icon || Config.icon) + (Config.iconClass ? " " + Config.iconClass : "");
            a.appendChild(icon);
          });
          new Element("span", function(text) {
            text.appendChild(document.createTextNode(" "));
            a.appendChild(text);
          });
          new Element("span", function(text) {
            if (options.text) {
              text.appendChild(document.createTextNode(options.text));
            }
            a.appendChild(text);
          });
          if (callback) {
            callback(a);
          }
        });
      }

      return Button;

    })(Element);

    Count = (function(_super) {
      __extends(Count, _super);

      function Count(options, callback) {
        if (options.data.count && options.data.count.api) {
          Count.__super__.constructor.call(this, "a", function(a) {
            a.className = "count";
            if (options.data.count.href) {
              a.href = options.data.count.href;
            }
            new Element("b", function(b) {
              a.appendChild(b);
            });
            new Element("i", function(i) {
              a.appendChild(i);
            });
            new Element("span", function(span) {
              var endpoint;
              a.appendChild(span);
              endpoint = (function() {
                var query, url;
                url = options.data.count.api.split("#")[0];
                query = QueryString.parse(url.split("?").slice(1).join("?"));
                query.callback = "callback";
                return (url.split("?")[0]) + "?" + (QueryString.stringify(query));
              })();
              new Element("script", function(script) {
                var head;
                script.async = true;
                script.src = "" + Config.api + endpoint;
                window.callback = function(json) {
                  var data;
                  window.callback = null;
                  if (json.meta.status === 200) {
                    data = FlatObject.flatten(json.data)[options.data.count.api.split("#").slice(1).join("#")];
                    if ("[object Number]" === Object.prototype.toString.call(data)) {
                      data = ("" + data).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    }
                    span.appendChild(document.createTextNode(" " + data + " "));
                    if (callback) {
                      callback(a);
                    }
                  }
                };
                window.callback.script = script;
                this.on("error", function() {
                  window.callback = null;
                });
                if (script.readyState) {
                  this.on("readystatechange", function() {
                    if (script.readyState === "loaded" && script.children && script.readyState === "loading") {
                      window.callback = null;
                    }
                  });
                }
                head = document.getElementsByTagName("head")[0];
                head.insertBefore(script, head.firstChild);
              });
            });
          });
        }
      }

      return Count;

    })(Element);

    return ButtonFrameContent;

  })();

  if (Config.script) {
    if (document.querySelectorAll) {
      anchors = document.querySelectorAll("a." + Config.anchorClass);
    } else {
      anchors = (function() {
        var _i, _len, _ref, _results;
        _ref = document.getElementsByTagName("a");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          anchor = _ref[_i];
          if (new Element(anchor).hasClass(Config.anchorClass)) {
            _results.push(anchor);
          }
        }
        return _results;
      })();
    }
    _fn = function(a) {
      new ButtonFrame(Hash.encode(ButtonAnchor.parse(a)), function(iframe) {
        a.parentNode.insertBefore(iframe, a);
      }, function() {
        a.parentNode.removeChild(a);
      });
    };
    for (_i = 0, _len = anchors.length; _i < _len; _i++) {
      anchor = anchors[_i];
      _fn(anchor);
    }
  } else {
    new ButtonFrameContent(Hash.decode());
  }

}).call(this);
